// const express = require("express")
// const app = express()
// const cors = require('cors');
// app.use(cors());
// const bodyP = require("body-parser")
// const compiler = require("compilex")
// const options = { stats: true }
// compiler.init(options)
// app.use(bodyP.json())
// app.use("/codemirror-5.65.16", express.static("./codemirror-5.65.16"))
// app.get("/", function (req, res) {
//     compiler.flush(function () {
//         console.log("All Temporary files flushed")
//     })
//     res.sendFile("C:/wamp64/www/PrepPros/ide/index.html")
// })
// app.post("/compile", function (req, res) {
//     var code = req.body.code
//     var input = req.body.input
//     var lang = req.body.lang
//     try {

//         if (lang == "Cpp") {
//             if (!input) {
//                 var envData = { OS: "windows", cmd: "g++", options: { timeout: 10000 } }; // (uses g++ command to compile )
//                 compiler.compileCPP(envData, code, function (data) {
//                     if (data.output) {
//                         res.send(data);
//                     }
//                     else {
//                         res.send({ output: "error" })
//                     }
//                 });
//             }
//             else {
//                 var envData = { OS: "windows", cmd: "g++", options: { timeout: 10000 } }; // (uses g++ command to compile )
//                 compiler.compileCPPWithInput(envData, code, input, function (data) {
//                     if (data.output) {
//                         res.send(data);
//                     }
//                     else {
//                         res.send({ output: "error" })
//                     }
//                 });
//             }
//         }
//         else if (lang == "Java") {
//             if (!input) {
//                 var envData = { OS: "windows" };
//                 compiler.compileJava(envData, code, function (data) {
//                     if (data.output) {
//                         res.send(data);
//                     }
//                     else {
//                         res.send({ output: "error" })
//                     }
//                 })
//             }
//             else {
//                 //if windows  
//                 var envData = { OS: "windows" };
//                 //else
//                 compiler.compileJavaWithInput(envData, code, input, function (data) {
//                     if (data.output) {
//                         res.send(data);
//                     }
//                     else {
//                         res.send({ output: "error" })
//                     }
//                 })
//             }
//         }
//         else if (lang == "Python") {
//             if (!input) {
//                 var envData = { OS: "windows" };
//                 compiler.compilePython(envData, code, function (data) {
//                     if (data.output) {
//                         res.send(data);
//                     }
//                     else {
//                         res.send({ output: "error" })
//                     }
//                 });
//             }
//             else {
//                 var envData = { OS: "windows" };
//                 compiler.compilePythonWithInput(envData, code, input, function (data) {
//                     if (data.output) {
//                         res.send(data);
//                     }
//                     else {
//                         res.send({ output: "error" })
//                     }
//                 });
//             }
//         }
//     }
//     catch (e) {
//         console.log("error")
//     }
// })

// app.listen(8000)

// Api.js
const express = require("express");
const app = express();
const cors = require("cors");
const bodyP = require("body-parser");
const compiler = require("compilex");
const path = require("path");

const options = { stats: true };
compiler.init(options);

app.use(cors());
app.use(bodyP.json());
// Serve static files correctly using path.join
app.use("/codemirror-5.65.16", express.static(path.join(__dirname, "codemirror-5.65.16")));

app.get("/", function (req, res) {
    compiler.flush(function () {
        console.log("All Temporary files flushed");
    });
    // Serve index.html using path.join
    res.sendFile(path.join(__dirname, "index.html"));
});

app.post("/compile", async function (req, res) {
    try {
        const code = req.body.code;
        const input = req.body.input;
        const lang = req.body.lang;

        let envData = { OS: "windows" };

        if (lang === "Cpp") {
            envData.cmd = "g++";
            envData.options = { timeout: 10000 };

            if (input) {
                compiler.compileCPPWithInput(envData, code, input, handleCompileResponse);
            } else {
                compiler.compileCPP(envData, code, handleCompileResponse);
            }
        }else if (lang === "C") {
            envData.cmd = "g++";
            envData.options = { timeout: 10000 };

            if (input) {
                compiler.compileCPPWithInput(envData, code, input, handleCompileResponse);
            } else {
                compiler.compileCPP(envData, code, handleCompileResponse);
            }
        } else if (lang === "Java") {
            if (input) {
                compiler.compileJavaWithInput(envData, code, input, handleCompileResponse);
            } else {
                compiler.compileJava(envData, code, handleCompileResponse);
            }
        } else if (lang === "Python") {
            if (input) {
                compiler.compilePythonWithInput(envData, code, input, handleCompileResponse);
            } else {
                compiler.compilePython(envData, code, handleCompileResponse);
            }
        } else {
            res.status(400).send({ output: "Unsupported language" });
        }
    } catch (e) {
        console.error("Error:", e);
        res.status(500).send({ output: "Internal Server Error" });
    }

    function handleCompileResponse(data) {
        if (data.output) {
            res.send(data);
        } else {
            res.send({ output: "error" });
        }
    }
});

const PORT = 8000;
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});



// <!-- index.html -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
        crossorigin="anonymous"></script>
  
    <link rel="stylesheet" href="codemirror-5.65.16/lib/codemirror.css">
    <script src="codemirror-5.65.16/mode/python/python.js"></script>

    <script src="codemirror-5.65.16/lib/codemirror.js"></script>
    <script src="codemirror-5.65.16/mode/clike/clike.js"></script>
    <link rel="stylesheet" href="codemirror-5.65.16/theme/ambiance.css">
    <script src="codemirror-5.65.16/addon/edit/closebrackets.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">
    <link rel="stylesheet" href="codemirror-5.65.16/lib/codemirror.css">
<script src="codemirror-5.65.16/lib/codemirror.js"></script>
<script src="codemirror-5.65.16/mode/python/python.js"></script>
<script src="codemirror-5.65.16/mode/clike/clike.js"></script>
<script src="codemirror-5.65.16/addon/edit/closebrackets.js"></script>



</head>

<body style="margin: 1%;">
    <div class="question" style="height: 20%; margin-top: 15% ;"></div>

    <div class="row m-3">
        <div class="col">
            <div class="d-flex justify-content-between mb-2 bg-dark rounded p-2">
                <div class="col-12 w-25">
                    <label class="visually-hidden" for="inlineFormSelectPref">Preference</label>
                    <select class="form-select" id="inlineFormSelectPref">
                        <option selected>Choose...</option>
                        <option value="Java">Java</option>
                        <option value="Cpp">Cpp</option>
                        <option value="C">C</option>
                        <option value="Python">Python</option>
                    </select>
                </div>
                <div>
                    <!-- <button type="button" class="btn btn-success">Coding Sprint</button> -->
                    <button type="button" id="run" class="btn btn-success">Run  <i class="bi bi-play-fill"></i></button>
                </div>
            </div>
            <textarea type="text" id="editor" class="form-control" aria-label="First name"></textarea>
        </div>
        <div class="col d-flex flex-column rounded bg-dark px-3">
            
            <div class="h-50">
                <label for="Input" class="text-light mt-4 mb-2">Input</label>
                <textarea type="text" id="input" class="form-control h-75" aria-label="Last name"></textarea>
            </div>
            <div class="h-50">
                <label for="Output" class="text-light mb-2">Output</label>
                <textarea type="text" id="output" class="form-control h-75" aria-label="Last name"></textarea>
            </div>
        </div>
    </div>
</body>
<script>
    var editor = CodeMirror.fromTextArea(document.getElementById("editor"), {
        mode: "text/x-c++src",
        theme: "ambiance",
        lineNumbers: true,
        autoCloseBrackets: true,

    })
    var width = window.innerWidth
    var input = document.getElementById("input")
    var output = document.getElementById("output")
    var run = document.getElementById("run")
    editor.setSize(0.7 * width, "500")
    var option = document.getElementById("inlineFormSelectPref")
    option.addEventListener("change", function () {
        if (option.value == "Java") {
            editor.setOption("mode", "text/x-java")
        }
        else if (option.value == "Python") {
            editor.setOption("mode", "text/x-python")
        }
        else if (option.value == "C") {
            editor.setOption("mode", "text/x-csrc")
        }
        else if (option.value == "Cpp") {
            editor.setOption("mode", "text/x-c++src")
        }
    })
    var code;
    run.addEventListener("click", async function () {
        code = {
            code: editor.getValue(),
            input: input.value,
            lang: option.value
        }
        console.log(code)
        var oData = await fetch("http://localhost:8000/compile", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(code)

            
        })
        var d = await oData.json()
        output.value = d.output
    })
</script>

</html>